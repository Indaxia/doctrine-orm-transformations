{
  "name": "Doctrine ORM Transformations",
  "tagline": "Provides JSON-ready Doctrine ORM Entity-Array Transformations",
  "body": "JSON-ready Doctrine ORM Entity-Array Transformations\r\n====================================== \r\n\r\nFeatures\r\n--------\r\n- JSON-ready toArray and fromArray Trait (**no need to extend class**);\r\n- Manipulating fields and **nested** sub-fields using [Policy](https://github.com/ScorpioT1000/doctrine-orm-transformations/blob/master/src/Policy.php) for each one;\r\n- Supports all Doctrine ORM Column types;\r\n- Supports JavaScript [ISO8601](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse) format for \"date\", \"time\" and \"datetime\" types;\r\n- Supports nested **Entities** and **Collections** for all the [Association](http://docs.doctrine-project.org/projects/doctrine-orm/en/latest/reference/association-mapping.html) types (be careful with self-referencing);\r\n- **fromArray** asks EntityManager to find by \"referencedColumnName\" or creates new sub-entities (depends on Identifier emptiness and Policy);\r\n- Same for [Collection](https://github.com/doctrine/collections/blob/master/lib/Doctrine/Common/Collections/ArrayCollection.php) members (OneToMany, ManyToMany);\r\n- Static **toArrays** method transforms multiple entities at once;\r\n- Has workarounds for [CVE-2015-0231](http://cve.mitre.org/cgi-bin/cvename.cgi?name=2015-0231) and [Doctrine issue #4673](https://github.com/doctrine/doctrine2/issues/4673);\r\n\r\nStep 1: Installation\r\n--------------------\r\n\r\nin **composer.json** add:\r\n```json\r\n\"require\": {\r\n\r\n    \"Indaxia/doctrine-orm-transformations\": \"^1.*\"\r\n}\r\n```\r\nthen\r\n```shell\r\n> cd <your doc root>\r\n> composer update\r\n```\r\n\r\nStep 2: Reference common classes\r\n--------------------------------\r\n\r\n```php\r\nuse \\Indaxia\\OTR\\ITransformable;\r\nuse \\Indaxia\\OTR\\Traits\\Transformable;\r\nuse \\Indaxia\\OTR\\Annotations\\Policy;\r\n```\r\n\r\nHow to transform entities to arrays and vice versa\r\n--------------------------------------------------\r\n\r\nLet's say we have the following entities:\r\n\r\n```php\r\n    class Car implements ITransformable {\r\n        use Transformable;\r\n    \r\n        /** @ORM\\Id\r\n         * @ORM\\Column(type=\"integer\") */\r\n        protected $id;\r\n        \r\n        /** @Policy\\To\\Skip\r\n         * @ORM\\Column(type=\"string\") */\r\n        protected $keys;\r\n        \r\n        /** @ORM\\OneToMany(targetEntity=\"Wheel\") ... */\r\n        $protected $wheels;\r\n        \r\n        public function getId();\r\n        public function getKeys() ...\r\n        public function setKeys($v) ...\r\n        ...\r\n    }\r\n    \r\n    class Engine implements ITransformable {\r\n        use Transformable;\r\n        \r\n        /** @ORM\\Id\r\n         * @ORM\\Column(type=\"integer\") */\r\n        protected $id;\r\n        \r\n        /** @Policy\\To\\Skip\r\n         * @ORM\\Column(type=\"string\") */\r\n        protected $serialNumber;\r\n        \r\n        public function getId();\r\n        public function getSerialNumber() ...\r\n        public function setSerialNumber($v) ...\r\n        ...\r\n    }\r\n    \r\n    class Wheel implements ITransformable {\r\n        use Transformable;\r\n        \r\n        /** @ORM\\Id\r\n         * @ORM\\Column(type=\"integer\") */\r\n        protected $id;\r\n        \r\n        /** @Policy\\Skip\r\n         * @ORM\\Column(type=\"string\") */\r\n        protected $brakes;\r\n        \r\n        /** @ORM\\Column(type=\"string\") */\r\n        protected $model;\r\n        \r\n        public function getId();\r\n        public function getBrakes() ...\r\n        public function setBrakes($v) ...\r\n        public function getModel() ...\r\n        public function setModel($v) ...\r\n        ...\r\n    }\r\n```\r\n\r\nHere we have some $car. Let's transform it to array.\r\n\r\n```php\r\n// Using global policy\r\n$result = $car->toArray();\r\n    \r\n// Using local policy\r\n$result = $car->toArray((new Policy\\Auto)->inside([\r\n    'wheels' => new Policy\\To\\Paginate(offset=0, limit=4)\r\n]));\r\n\r\n// Local policy overrides global policy\r\n$result = $car->toArray([\r\n    'keys' => new Policy\\Auto\r\n]);\r\n```\r\n[Policy options](https://github.com/Indaxia/doctrine-orm-transformations/blob/master/src/Policy.php)\r\n            \r\n$result will be something like:\r\n\r\n```php\r\n[\r\n    '_meta' => ['class' => 'Car'],\r\n    'id' => 1,\r\n    'engine' => [\r\n        '_meta' => ['class' => 'Engine', 'association' => 'OneToOne'],\r\n        'id' => 83\r\n    ],\r\n    'wheels' => [\r\n        '_meta' => ['class' => 'Wheel', 'association' => 'OneToMany'],\r\n        'collection' => [\r\n            [\r\n                '_meta' => ['class' => 'Wheel'],\r\n                'id' => 1,\r\n                'model' => 'A'\r\n            ],\r\n            [\r\n                '_meta' => ['class' => 'Wheel'],\r\n                'id' => 2,\r\n                'model' => 'A'\r\n            ],\r\n            [\r\n                '_meta' => ['class' => 'Wheel'],\r\n                'id' => 3,\r\n                'model' => 'B'\r\n            ],\r\n            [\r\n                '_meta' => ['class' => 'Wheel'],\r\n                'id' => 4,\r\n                'model' => 'B'\r\n            ]\r\n        ]\r\n    ]\r\n]\r\n```\r\n\r\n**It's ready for JSON transformation!**\r\n```php\r\n    echo json_encode($result);\r\n```    \r\nYou can also use something like [array2XML](https://github.com/Jeckerson/array2xml) and more.\r\n    \r\n\r\nAnd we can transform it to Entity again.\r\nIt will retrieve sub-entities by id using EntityManager.\r\nDon't forget to use try-catch block to avoid uncaught exceptions.\r\n\r\n```php\r\n$carB = new Car();\r\n    \r\n// Simple way\r\n$carB->fromArray($result, $entityManager);\r\n\r\n// With Policy\r\n$carB->fromArray($result, $entityManager, (new Policy\\Auto())->inside([\r\n    'keys' => mew Policy\\Skip,\r\n    'engine' => (new Policy\\Auto())->inside([\r\n        'serialNumber' => new Policy\\From\\AllowNewOnly\r\n    ]),\r\n    'wheels' => (new Policy\\Auto())->inside([\r\n        'brakes' => new Policy\\From\\Auto\r\n    ])\r\n]);\r\n```\r\n[Policy options](https://github.com/Indaxia/doctrine-orm-transformations/blob/master/src/Policy.php)\r\n\r\nMore Demos\r\n----------\r\n[Example Entities & Symfony 3 Controller](https://github.com/Indaxia/doctrine-orm-transformations/tree/master/examples) are included.\r\n\r\n\r\nHow to redeclare Transformable methods\r\n--------------------------------------\r\n\r\n```php\r\n    class A implements ITransformable {\r\n        use Transformable {\r\n            toArray as traitToArray;\r\n            fromArray as traitFromArray;\r\n        }\r\n        \r\n        public function toArray ...\r\n        public function fromArray ...\r\n    }\r\n```\r\n\r\n-------------------------------\r\n\r\n[Indaxia](http://indaxia.com) / 2016",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}